nextflow_pipeline {

    name "Test pipeline: NFCORE_EAGER"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_eager"
    tag "test"

    test("test_profile") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot( path("$outputDir/bam_filtering")            ).match("bam_filtering") },
                { assert snapshot( path("$outputDir/bam_input_stats")          ).match("bam_input_stats") },
                { assert snapshot( path("$outputDir/deduplication")            ).match("deduplication") },
                { assert snapshot( path("$outputDir/mapping")                  ).match("mapping") },
                { assert snapshot( path("$outputDir/samtools")                 ).match("samtools") }, // not sure what this is...
                /*
                    Exceptions (variable md5sums)
                */

                // Damage Estimation
                { assert snapshot(
                        getAllFilesFromDir("$outputDir/damage_estimation/"     , ".txt" ),
                        getAllFilesFromDir("$outputDir/damage_estimation/"     , ".json"),
                        getAllFileNamesFromDir("$outputDir/damage_estimation/" , ".svg" ),
                        getAllFileNamesFromDir("$outputDir/damage_estimation/" , ".pdf" ),
                        checkAllFilesNamesFromDirForString("$outputDir/damage_estimation/", '.log', 'FINISHED SUCCESSFULLY'),
                    ).match("damage_estimation")
                },

                // Preprocessing
                { assert snapshot(
                        getAllFilesFromDir("$outputDir/preprocessing/fastp"                 , '.json'             ),
                        getAllFileNamesFromDir("$outputDir/preprocessing/fastp"             , '.html'             ),
                        checkAllFilesNamesFromDirForString("$outputDir/preprocessing/fastp" , '.log', 'time used:'),
                        getAllFilesFromDir("$outputDir/preprocessing/fastqc_raw"            , '.html'             ),
                        getAllFileNamesFromDir("$outputDir/preprocessing/fastqc_raw"        , '.zip'              ),
                        getAllFilesFromDir("$outputDir/preprocessing/fastqc_processed"      , '.html'             ),
                        getAllFileNamesFromDir("$outputDir/preprocessing/fastqc_processed"  , '.zip'              ),
                    ).match("preprocessing" )
                },

                // Final BAMs
                { assert snapshot(
                        getAllFilesFromDir("$outputDir/final_bams"    , '.flagstat'),
                        getAllFileNamesFromDir("$outputDir/final_bams", '.bam'     ),
                        getAllFileNamesFromDir("$outputDir/final_bams", '.bai'     ),
                    ).match("final_bams")
                },

                // mapstats
                { assert snapshot(
                        getAllFilesFromDir("$outputDir/mapstats", '.bed'),
                        getAllFilesFromDir("$outputDir/mapstats", '.json'),
                        getAllFilesFromDir("$outputDir/mapstats", '.txt'),
                        getAllFilesFromDir("$outputDir/mapstats", '.log'),
                        getAllFilesFromDir("$outputDir/mapstats", '.css'),
                        getAllFilesFromDir("$outputDir/mapstats", '.png'),
                        getAllFilesFromDir("$outputDir/mapstats", '.js'),
                        getAllFileNamesFromDir("$outputDir/mapstats", '.html'), // For variable qualimapReport.html
                    ).match("mapstats")
                },

                { assert new File("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml").exists() },
                { assert new File("$outputDir/multiqc/multiqc_report.html").exists() }, // TODO: Would be good to check all files so numbers aren't changing(?)
                { assert new File("$outputDir/multiqc/multiqc_data/").exists() }
            )
        }
    }
}

// Recursively list all files in a directory and its sub-directories, matching a given suffix
// TODO: use regex pattern instead of suffix?
def getAllFilesFromDir(dir, suffix) {
    def output = []
    new File(dir).eachFileRecurse() {
        if (it.name.toString().endsWith(suffix)) {
            output.add(it)
        }
    }
    return output.sort()
}
// Recursively list all files names in a directory and its sub-directories, matching a given suffix, return file names
def getAllFileNamesFromDir(dir, suffix) {
    def output = []
    new File(dir).eachFileRecurse() {
        if (it.name.toString().endsWith(suffix)) {
            output.add(it.toString().split("/")[-1])
        }
    }
    return output.sort()
}

// Recursively list all files names in a directory and its sub-directories, matching a given suffix, return if check if given string is in file
def checkAllFilesNamesFromDirForString(dir, suffix, string) {
    def output = []
    new File(dir).eachFileRecurse() {
        if (it.name.toString().endsWith(suffix)) {
            output.add(it.text.contains(string))
        }
    }
    return output.sort()
}
