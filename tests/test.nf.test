nextflow_pipeline {

    name "Test pipeline: NFCORE_EAGER"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_eager"
    tag "test"

    test("test_profile") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {

            // Each top level results directory should be tested with individual snapshots/variables
            // stable_name_<dir> is for files with variable md5sums (i.e. content) so only names will be compared
            // stable_content_<dir> is for files with stable md5sums (i.e. content) so md5sums will be compared
            // For both cases, use the third argument to specify globs to exclude certain files
            // If a directory is fully stable, you can drop `stable_name_*`
            // Generate with: nf-test test --tag test --profile docker,test --update-snapshot
            // Test with:     nf-test test --tag test --profile docker,test
            // NOTE: BAMs are always only stable in name, because:
            //   a) sharding breaks header since the shard that was first is named in the header
            //   b) the order of the reads in the BAMs is not stable (sorted, but reads that share a start position can be in any order)
            //   point b) also causes BAIs to be unstable.

            def stable_name_all                 = getAllFilesFromDir("$outputDir/"                  , true , ['pipeline_info/*']                 , null , ['*', '**/*'] )

            //Bam filtering
            def stable_content_bamfiltering     = getAllFilesFromDir("$outputDir/bam_filtering"     , true , ['*.{bam,bai}']                     , null , ['*.flagstat'] )
            def stable_name_bamfiltering        = getAllFilesFromDir("$outputDir/bam_filtering"     , true , ['*.flagstat']                      , null , ['*.{bam,bai}'] )

            // Bam input stats
            def stable_content_baminputstats    = getAllFilesFromDir("$outputDir/bam_input_stats"   , true , null                                , null , ['*.flagstat'] )

            // Damage estimation
            def stable_content_damageestimation = getAllFilesFromDir("$outputDir/damage_estimation" , true , ['**/*.{svg,pdf,log}']              , null , ['**/*.{txt,json}'] )
            def stable_name_damageestimation    = getAllFilesFromDir("$outputDir/damage_estimation" , true , ['**/*.{txt,json}']                 , null , ['**/*.{svg,pdf,log}'] )

            // Deduplication
            def stable_content_deduplication    = getAllFilesFromDir("$outputDir/deduplication"     , true , ['*.{bam,bai}']                     , null , ['*.flagstat'] )
            def stable_name_deduplication       = getAllFilesFromDir("$outputDir/deduplication"     , true , ['*.flagstat']                      , null , ['*.{bam,bai}'] )

            // Final_bams
            def stable_content_final_bams       = getAllFilesFromDir("$outputDir/final_bams"        , true , null                                , null , ['**/*.flagstat']  )
            def stable_name_final_bams          = getAllFilesFromDir("$outputDir/final_bams"        , true , null                                , null , ['**/*.{bam,bai}']  )

            //Mapping
            def stable_content_mapping          = getAllFilesFromDir("$outputDir/mapping"           , true , null                                , null , ['**/*.flagstat'] )
            def stable_name_mapping             = getAllFilesFromDir("$outputDir/mapping"           , true , null                                , null , ['**/*.{bam,bai}'] )

            // Mapstats
            // NOTE: GC content data and plot has minor changes between runs. I suspect this is because of the order of reads that start at the same position being unstable, but I am not sure.
            def stable_content_mapstats         = getAllFilesFromDir("$outputDir/mapstats"          , true , ['**/*.html', '**/mapped_reads_gc-content_distribution.txt', '**/genome_gc_content_per_window.png'], null , ['**/*.{bed,json,txt,log,css,png,js}'] )
            def stable_name_mapstats            = getAllFilesFromDir("$outputDir/mapstats"          , true , null                                                                                               , null , ['**/*.html', '**/mapped_reads_gc-content_distribution.txt', '**/genome_gc_content_per_window.png'] )

            // MultiQC
            def stable_name_multiqc            = getAllFilesFromDir("$outputDir/multiqc"           , true , null              , null , ['*', '**/*'] )

            // Preprocessing
            def stable_content_preprocessing    = getAllFilesFromDir("$outputDir/preprocessing"     , true , ['**/*.{zip,log}', '**/*fastp.html'], null , ['**/*'] )
            def stable_name_preprocessing       = getAllFilesFromDir("$outputDir/preprocessing"     , true , null                                , null , ['**/*.{zip,log}', '**/*fastp.html'] )

            assertAll(
                { assert workflow.success },
                // This checks that there are no missing or additional output files.
                // Also a good starting point to look at all the files in the output folder than need to be checked in subsequent sections.
                { assert snapshot( stable_name_all*.name            ).match("all_files") },

                // Checking changes to contents of each section
                { assert snapshot( stable_content_bamfiltering    , stable_name_bamfiltering*.name     ).match("bam_filtering") },
                { assert snapshot( stable_content_baminputstats   ).match("bam_input_stats") },
                { assert snapshot( stable_content_damageestimation, stable_name_damageestimation*.name ).match("damage_estimation") },
                { assert snapshot( stable_content_deduplication   , stable_name_deduplication*.name    ).match("deduplication") },
                { assert snapshot( stable_content_final_bams      , stable_name_final_bams*.name       ).match("final_bams") },
                // NOTE: The snapshot section for mapping cannot be named 'mapping'. See https://github.com/askimed/nf-test/issues/279
                { assert snapshot( stable_content_mapping         , stable_name_mapping*.name          ).match("mapping_output") },
                { assert snapshot( stable_content_mapstats        , stable_name_mapstats*.name         ).match("mapstats") },
                { assert snapshot( stable_name_multiqc*.name      ).match("multiqc") },
                { assert snapshot( stable_content_preprocessing   , stable_name_preprocessing*.name    ).match("preprocessing") },

                // Versions
                { assert new File("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml").exists() },


            )
        }
    }
}
