nextflow_pipeline {

    name "Test pipeline: NFCORE_EAGER"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_eager"
    tag "test"

    test("test_profile") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {

            // Each top level results directory should be tested with individual snapshots/variables
            // stable_name_<dir> is for files with variable md5sums (i.e. content) so only names will be compared
            // stable_content_<dir> is for files with stable md5sums (i.e. content) so md5sums will be compared
            // For both cases, use the third argument to specify globs to exclude certain files
            // If a directory is fully stable, you can drop `stable_name_*`
            // Generate with: nf-test test --tag test --profile docker,test --update-snapshot
            // Test with:     nf-test test --tag test --profile docker,test
            def stable_name_all                 = getAllFilesFromDir("$outputDir/"                  , true , ['pipeline_info/*']            , null , ['*', '**/*'] )
            def stable_content_bamfiltering     = getAllFilesFromDir("$outputDir/bam_filtering"     , true , null                           , null , ['*', '**/*'] )
            def stable_content_baminputstats    = getAllFilesFromDir("$outputDir/bam_input_stats"   , true , null                           , null , ['*', '**/*'] )
            def stable_content_damageestimation = getAllFilesFromDir("$outputDir/damage_estimation" , true , ['**/*.{svg,pdf,log}']         , null , ['**/*.{txt,json}'] )
            def stable_name_damageestimation    = getAllFilesFromDir("$outputDir/damage_estimation" , true , ['**/*.{txt,json}']            , null , ['**/*.{svg,pdf,log}'] )
            // TODO: BAM and (mostly) BAI md5sums are unstable. Need to use nft-utils to test read md5sums, while excluding header?
            def stable_content_deduplication    = getAllFilesFromDir("$outputDir/deduplication"     , true , null                           , null , ['*', '**/*'] )
            // Final_bams
            def stable_content_mapping          = getAllFilesFromDir("$outputDir/mapping"           , true , null                           , null , ['*', '**/*'] )
            // mapstats
            def stable_content_preprocessing    = getAllFilesFromDir("$outputDir/preprocessing"     , true , ['**/*.{zip,log}', '**/*fastp.html'], null , ['**/*'] )
            def stable_name_preprocessing       = getAllFilesFromDir("$outputDir/preprocessing"     , true , null                           , null , ['**/*.{zip,log}', '**/*fastp.html'] )
            // MultiQC

            // TODO
            assertAll(
                { assert workflow.success },
                // This checks that there are no missing or additional output files.
                // Also a good starting point to look at all the files in the output folder than need to be checked in subsequent sections.
                { assert snapshot( stable_name_all*.name            ).match("all_files") },

                // Checking changes to contents of each section
                { assert snapshot( stable_content_bamfiltering      ).match("bam_filtering") },
                { assert snapshot( stable_content_baminputstats     ).match("bam_input_stats") },
                { assert snapshot( stable_content_deduplication     ).match("deduplication") },
                { assert snapshot( stable_content_mapping           ).match("mapping") },
                { assert snapshot( stable_content_damageestimation, stable_name_damageestimation*.name ).match("damage_estimation") },
                { assert snapshot( stable_content_preprocessing   , stable_name_preprocessing*.name    ).match("preprocessing") },

                // // Preprocessing
                // { assert snapshot(
                //         getAllFilesFromDir("$outputDir/preprocessing/fastp"                 , '.json'             ),
                //         getAllFilesFromDir("$outputDir/preprocessing/fastqc_raw"            , '.html'             ),
                //         getAllFilesFromDir("$outputDir/preprocessing/fastqc_processed"      , '.html'             ),
                //         checkAllFilesNamesFromDirForString("$outputDir/preprocessing/fastp" , '.log', 'time used:'),
                //         getAllFileNamesFromDir("$outputDir/preprocessing/fastp"             , '.html'             ),
                //         getAllFileNamesFromDir("$outputDir/preprocessing/fastqc_raw"        , '.zip'              ),
                //         getAllFileNamesFromDir("$outputDir/preprocessing/fastqc_processed"  , '.zip'              ),
                //     ).match("preprocessing" )
                // },

                // // Final BAMs
                // { assert snapshot(
                //         getAllFilesFromDir("$outputDir/final_bams"    , '.flagstat'),
                //         getAllFileNamesFromDir("$outputDir/final_bams", '.bam'     ),
                //         getAllFileNamesFromDir("$outputDir/final_bams", '.bai'     ),
                //     ).match("final_bams")
                // },

                // // Mapstats
                // { assert snapshot(
                //         getAllFilesFromDir("$outputDir/mapstats", '.bed'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.json'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.txt'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.log'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.css'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.png'),
                //         getAllFilesFromDir("$outputDir/mapstats", '.js'),
                //         getAllFileNamesFromDir("$outputDir/mapstats", '.html'), // For variable qualimapReport.html
                //     ).match("mapstats")
                // },

                // // MultiQC
                // { assert snapshot(
                //         path("$outputDir/multiqc/multiqc_report.html").exists()
                //     ).match("multiqc")
                // },

                // Versions
                { assert new File("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml").exists() },


            )
        }
    }
}
